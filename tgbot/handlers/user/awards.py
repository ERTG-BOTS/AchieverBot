import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import User
from infrastructure.database.models.awards import Awards
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.handlers.user.main import main_cmd
from tgbot.keyboards.user.awards import AwardsMenu, awards_kb, AvailableAwardsMenu, \
    awards_available_kb, awards_paginated_kb, AwardSelect, awards_back, confirm_award_kb
from tgbot.keyboards.user.main import MainMenu
from tgbot.misc.states import AwardBuy
from tgbot.services.logger import setup_logging
from tgbot.services.mailing import new_award_email

awards_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@awards_router.callback_query(MainMenu.filter(F.menu == "awards"))
async def awards(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥
    """
    await callback.answer()
    await callback.message.edit_text(f"""<b>üëè –ù–∞–≥—Ä–∞–¥—ã</b>

üìå<u><b>–ù–∞–≥—Ä–∞–¥—ã</b></u> - —ç—Ç–æ –±–æ–Ω—É—Å –∑–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã

–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ <b>‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ</b>, —Ç–∞–º —É–∫–∞–∑–∞–Ω—ã –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
–ù–∞–≥—Ä–∞–¥—ã —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º üßÆ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <u>–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–º–µ–Ω—É</u>

–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥–∞ –∏–¥–µ—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
–°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –º–µ–Ω—é <b>‚ú¥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ</b>""", reply_markup=awards_kb())
    logging.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥")


@awards_router.callback_query(AwardsMenu.filter(F.menu == "available"))
async def awards_available(callback: CallbackQuery, achiever_db) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–≥—Ä–∞–¥
    """
    await callback.answer()
    await show_available_awards_page(callback, achiever_db, page=1)


@awards_router.callback_query(AvailableAwardsMenu.filter(F.action == "page"))
async def awards_available_page_handler(callback: CallbackQuery, callback_data: AvailableAwardsMenu,
                                        achiever_db):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–≥—Ä–∞–¥
    """
    await callback.answer()
    await show_available_awards_page(callback, achiever_db, page=callback_data.page)


@awards_router.callback_query(AwardSelect.filter())
async def award_select_handler(callback: CallbackQuery, callback_data: AwardSelect, achiever_db, stp_db):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    await callback.answer()
    async with achiever_db() as session:
        repo = RequestsRepo(session)
        total_points = await repo.accruals.accruals_sum(user_id=callback.from_user.id)
        wasted_points = await repo.executes.executes_sum(user_id=callback.from_user.id)
        user_balance = total_points - wasted_points

        available_awards = await repo.awards.get_available_awards(
            user_id=callback.from_user.id,
            user_balance=user_balance
        )

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã
    selected_award = next((award for award in available_awards if award.Id == callback_data.award_id), None)

    if not selected_award:
        await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    if selected_award.Sum > user_balance:
        await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤! –ù—É–∂–Ω–æ: {selected_award.Sum}, —É –≤–∞—Å: {user_balance}")
        return

    async with achiever_db() as achiever_session:
        repo = RequestsRepo(achiever_session)
        db_selected_award: Awards = await repo.awards.get_award(award_id=selected_award.Id)

    if db_selected_award.IsShiftDependent:
        async with stp_db() as stp_session:
            repo = RequestsRepo(stp_session)
            user: User = await repo.users.get_user(user_id=callback.from_user.id)
            is_working = await repo.buffer.is_user_working_today(fio=user.FIO, division=user.Division)

        if not is_working:
            await callback.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ\–¥–æ–ø —Å–º–µ–Ω—ã!")
            return

    await callback.message.edit_text(f"""<b>üëè –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã</b>

–¢—ã –≤—ã–±—Ä–∞–ª –Ω–∞–≥—Ä–∞–¥—É <b>{db_selected_award.Name}</b>
–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º?

<blockquote expandable><b>‚ú® –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {db_selected_award.Sum} –±–∞–ª–ª–æ–≤
<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {db_selected_award.Description}
<b>üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {db_selected_award.Count}</blockquote>

<i>–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è <b>{user_balance - db_selected_award.Sum} –±–∞–ª–ª–æ–≤</b></i>""",
                                     reply_markup=confirm_award_kb(award_id=db_selected_award.Id))
    logging.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] {callback.from_user.username} ({callback.from_user.id}): –í—ã–±—Ä–∞–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ {db_selected_award.Name}, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")


@awards_router.callback_query(AwardsMenu.filter(F.award_id != 0))
async def confirm_award(callback: CallbackQuery, callback_data: AwardsMenu, state: FSMContext, achiever_db):
    await callback.answer()
    async with achiever_db() as achiever_session:
        repo = RequestsRepo(achiever_session)
        db_selected_award: Awards = await repo.awards.get_award(award_id=callback_data.award_id)

    await callback.message.edit_text(f"""<b>üëè –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

–ì–æ—Ç–æ–≤ –≤—ã–¥–∞—Ç—å —Ç–µ–±–µ –Ω–∞–≥—Ä–∞–¥—É <b>{db_selected_award.Name}</b>
–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–∫—É–ø–∫–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤—å –≤ —ç—Ç–æ—Ç —á–∞—Ç

<blockquote expandable><b>‚ú® –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {db_selected_award.Sum} –±–∞–ª–ª–æ–≤
<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {db_selected_award.Description}
<b>üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {db_selected_award.Count}</blockquote>""",
                                     reply_markup=awards_back())
    await state.update_data(award_id=db_selected_award.Id)
    await state.set_state(AwardBuy.comment)
    logging.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ü–æ–∫—É–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã] {callback.from_user.username} ({callback.from_user.id}): –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—ã–±–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã {db_selected_award.Name}, –∂–¥–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")


@awards_router.message(AwardBuy.comment)
async def comment_award(message: Message, state: FSMContext, achiever_db, stp_db):
    await message.delete()
    state_data = await state.get_data()

    async with stp_db() as achiever_session:
        repo = RequestsRepo(achiever_session)
        user: User = await repo.users.get_user(message.from_user.id)
        boss: User = await repo.users.get_user(fullname=user.Boss)

    async with achiever_db() as achiever_session:
        repo = RequestsRepo(achiever_session)
        award: Awards = await repo.awards.get_award(award_id=state_data["award_id"])

        user_accruals = await repo.accruals.accruals_sum(user_id=message.from_user.id)
        user_executes = await repo.executes.executes_sum(user_id=message.from_user.id)
        user_balance = user_accruals - user_executes  # before current execute

    execute = await repo.executes.add_pending_award(award=award, user=user, comment=message.text)
    await new_award_email(execute=execute, award=award, user=user, boss=boss)
    await message.bot.send_sticker(chat_id=message.from_user.id,
                                   sticker="CAACAgIAAxkBAAEMIzVmR3nXp5DuvWwCgMOPLIIuvmcYcwACjkQAAm44QErJPrDwaCwLDDUE")
    await message.bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message_id - 1, text=f"""<b>‚úÖÔ∏è –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞</b>

–¢—ã –∫—É–ø–∏–ª –Ω–∞–≥—Ä–∞–¥—É <b>{award.Name}</b>

<blockquote expandable><b>‚ú® –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {award.Sum} –±–∞–ª–ª–æ–≤
<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {award.Description}
<b>üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {award.Count}</blockquote>

<b>üóëÔ∏è –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {award.Sum} –±–∞–ª–ª–æ–≤
<b>üí≥ –û—Å—Ç–∞–ª–æ—Å—å:</b> {user_balance - award.Sum} –±–∞–ª–ª–æ–≤

<i>–ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É <b>—Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b></i>""")

    logging.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ü–æ–∫—É–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã] {message.from_user.username} ({message.from_user.id}): –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ {award.Name}")
    await main_cmd(message=message, state=state, stp_db=stp_db)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
@awards_router.callback_query(AwardsMenu.filter(F.menu == "all"))
async def awards_all(callback: CallbackQuery, achiever_db):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–µ–Ω—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    """

    # –î–æ—Å—Ç–∞—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ = 1
    callback_data = AwardsMenu.unpack(callback.data)
    page = getattr(callback_data, 'page', 1)

    async with achiever_db() as session:
        repo = RequestsRepo(session)
        all_awards = await repo.awards.get_awards()

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(all_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = all_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        awards_list.append(f"""{counter}. <b>{award.Name}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.Sum}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.Description}""")
        if award.Count > 0:
            awards_list.append(f"""üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.Count}""")
        awards_list.append("")

    message_text = f"""<b>üèÜ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{"\n".join(awards_list)}"""

    await callback.message.edit_text(
        message_text,
        reply_markup=awards_paginated_kb(page, total_pages)
    )
    logging.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")


async def show_available_awards_page(callback: CallbackQuery, achiever_db, page: int = 1):
    """
    –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–≥—Ä–∞–¥
    """
    async with achiever_db() as session:
        repo = RequestsRepo(session)
        total_points = await repo.accruals.accruals_sum(user_id=callback.from_user.id)
        wasted_points = await repo.executes.executes_sum(user_id=callback.from_user.id)
        user_balance = total_points - wasted_points

        available_awards = await repo.awards.get_available_awards(
            user_id=callback.from_user.id,
            user_balance=user_balance
        )

    # –õ–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    awards_per_page = 5
    total_awards = len(available_awards)
    total_pages = (total_awards + awards_per_page - 1) // awards_per_page if total_awards > 0 else 1

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    page = max(1, min(page, total_pages))

    # –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * awards_per_page
    end_idx = start_idx + awards_per_page
    page_awards = available_awards[start_idx:end_idx]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    awards_list = []
    for counter, award in enumerate(page_awards, start=start_idx + 1):
        awards_list.append(f"""{counter}. <b>{award.Name}</b>
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {award.Sum}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {award.Description}""")
        if hasattr(award, 'Count') and award.Count > 0:
            awards_list.append(f"""üßÆ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {award.Count}""")
        awards_list.append("")

    if total_awards == 0:
        message_text = f"""<b>‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –æ—á–∫–æ–≤

–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥."""
    else:
        message_text = f"""<b>‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</b>
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} –æ—á–∫–æ–≤
<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}</i>

{"\n".join(awards_list)}"""

    await callback.message.edit_text(message_text, reply_markup=awards_available_kb(page_awards, page, total_pages))
    logging.info(
        f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - [–ú–µ–Ω—é] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
