import logging
import re

from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.admin import AdminFilter
from tgbot.keyboards.admin.main import AdminMenu
from tgbot.services.logger import setup_logging
from aiogram.fsm.context import FSMContext

search_router = Router()
search_router.message.filter(AdminFilter())

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


class SearchState(StatesGroup):
    fio = State()


@search_router.callback_query(AdminMenu.filter(F.menu == "search"))
async def admin_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"""<b>üîé –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>

–í–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞""")
    await state.set_state(SearchState.fio)


@search_router.message(SearchState.fio)
async def search_message(message: Message, state: FSMContext, stp_db):
    fio = message.text.strip()
    await state.clear()

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ç—ã –≤–≤–æ–¥–∞
    regex_fullname = r"^([–∞-—è–ê-–Ø—ë–Å]+)\s([–∞-—è–ê-–Ø—ë–Å]+)\s([–∞-—è–ê-–Ø—ë–Å]+)\s([–∞-—è–ê-–Ø—ë–Å]+)$" #
    regex_name_surname_patronymic = r"^([–∞-—è–ê-–Ø—ë–Å]+)\s([–∞-—è–ê-–Ø—ë–Å]+)\s([–∞-—è–ê-–Ø—ë–Å]+)$"
    regex_name_surname = r"^([–∞-—è–ê-–Ø—ë–Å]+)\s([–∞-—è–ê-–Ø—ë–Å]+)$" # –ò–º—è + –§–∞–º–∏–ª–∏—è

    async with stp_db() as session:
        repo = RequestsRepo(session)

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        user: User = await repo.users.get_user(fullname=fio)

    if user:
        # –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π match
        logger.info(f"[–ê–¥–º–∏–Ω] - [–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] {user.FIO}")
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.FIO}")
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return

    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
    if re.match(regex_fullname, fio) or re.match(regex_name_surname_patronymic, fio):
        # –ü–æ–ª–Ω–æ–µ –§–ò–û –≤–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç
        users = await repo.users.get_users_by_fio_parts(fio)

        if users:
            if len(users) == 1:
                await message.answer(f"""<b>üîé –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>"

–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[0].FIO}
""")
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                response = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                for i, user in enumerate(users, 1):
                    response += f"{i}. {user.FIO}\n"
                await message.answer(response)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    elif re.match(regex_name_surname, fio):
        # –í–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
        users = await repo.users.get_users_by_fio_parts(fio)

        if users:
            if len(users) == 1:
                await message.answer(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[0].FIO}")
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                response = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:\n"
                for i, user in enumerate(users, 1):
                    response += f"{i}. {user.FIO}\n"
                await message.answer(response)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –§–ò–û")

    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è\n"
            "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        )